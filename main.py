#!venv/bin/python
import logging
from typing import TextIO
from aiogram import Bot, Dispatcher, executor, types
from aiogram.types import message_id, user
from aiogram.types.message import Message
from mat import *
from filters import Is_Admin_Filter
from asyncio import sleep
import random
import markups as mp
# –í–∫–ª—é—á–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å –≤–∞–∂–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –û–±—ä–µ–∫—Ç –±–æ—Ç–∞
bot = Bot(token="1977948311:AAHySwxcRlMPsMmVlvXpBeghXLcMf3yrBkw")
GROUP_ID = -1001269417782

# –î–∏—Å–ø–µ—Ç—á–µ—Ä –¥–ª—è –±–æ—Ç–∞
dp = Dispatcher(bot)

# —Ñ–∏–ª—å—Ç—Ä—ã –¥–ª—è –∫–Ω–æ–ø–æ–∫
dp.filters_factory.bind(Is_Admin_Filter)

# –§—É–Ω–∫—Ü–∏—è –±–∞–Ω
@dp.message_handler(is_admin = True, commands=["ban"])
async def cmd_ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    await message.delete()
    await message.bot.kick_chat_member(chat_id=GROUP_ID,user_id=message.reply_to_message.from_user.id)

    await message.reply_to_message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω –ø–æ –≤–æ–ª–µ –≠—Å–µ–Ω–±–µ–∫–∞")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –æ –ø—Ä–∏—Å–æ–µ–¥–µ–Ω–µ–Ω–∏–π
@dp.message_handler(chat_id=GROUP_ID, content_types=["new_chat_members"])
async def on_user_join(message: types.Message):
    await message.delete()

# –§—É–Ω–∫—Ü–∏—è —Ä–∞–∑–±–∞–Ω
@dp.message_handler(is_admin = True, commands=["unban"])
async def cmd_ban(message: types.Message):
    if not message.reply_to_message:
        await message.reply("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –æ—Ç–≤–µ—Ç–æ–º –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ!")
        return
    await message.delete()
    await message.bot.unban_chat_member(chat_id=GROUP_ID,user_id=message.reply_to_message.from_user.id)

    await message.reply_to_message.reply(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.reply_to_message.from_user.full_name} –±—ã–ª —Ä–∞–∑–∑–∞–±–∞–Ω–µ–Ω –ø–æ –≤–æ–ª–µ –≠—Å–µ–Ω–±–µ–∫–∞")



# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤—ã–∑–æ–≤–∞ –∏–≥—Ä
@dp.message_handler(commands=["game"])
async def games_bot(message: types.Message):
    await bot.send_message(GROUP_ID, "–ò–ì–†–´", reply_markup=mp.games)


# –§—É–Ω–∫—Ü–∏—è —Å –æ—Ç–∫–ª–∏–∫–æ–º –Ω–∞ –∏–≥—Ä—É –∫–æ—Å—Ç–∏
@dp.callback_query_handler(text="bones")
async def play_bones(mesage: types.Message):
    await bot.delete_message(GROUP_ID, mesage.message.message_id)
    await bot.send_message(GROUP_ID, f"{mesage.from_user.first_name}   VS   BOT")
    await sleep(1)

    await bot.send_message(GROUP_ID, '–ö–æ—Å—Ç—å –ë–û–¢–ê')
    bot_data = await bot.send_dice(GROUP_ID)
    bot_data = bot_data['dice']['value']
    await sleep(5)
    
    await bot.send_message(GROUP_ID, f"–ö–æ—Å—Ç—å {mesage.from_user.first_name}")
    user_data = await bot.send_dice(GROUP_ID)
    user_data = user_data['dice']['value']
    await sleep(5)

    if bot_data > user_data:
        await bot.send_message(GROUP_ID, '–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –õ–û–®–û–ö )')
    elif user_data > bot_data:
        await bot.send_message(GROUP_ID, '–¢—ã –≤—ã–∏–≥—Ä–∞–ª –ë–ê–ó–ê–† –ñ–û–ö!')
    else:
        await bot.send_message(GROUP_ID, '–ù–ò–ß–¨–Ø –ù–ê–•–û–ô!')

# –§—É–Ω–∫—Ü–∏—è —Å –æ—Ç–∫–ª–∏–∫–æ–º –Ω–∞ –∏–≥—Ä—É –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞
@dp.callback_query_handler(text="kmb")
async def kamen_bum(message: types.Message):
    await bot.delete_message(GROUP_ID, message.message.message_id)
    await bot.send_message(GROUP_ID, f"{message.from_user.first_name} VS BOT\n –í—ã–±–∏—Ä–∞–π:", reply_markup=mp.kam_noj_bum)
# –º–µ–¥–æ–¥—ã –¥–ª—è –∏–≥—Ä—ã –∫–∞–º–µ–Ω—å –Ω–æ–∂–Ω–∏—Ü—ã –±—É–º–∞–≥–∞
@dp.callback_query_handler(text="kamen")
async def kamen_fun(message: types.Message):

    await bot.delete_message(GROUP_ID, message.message.message_id)

    if bot_play[random.randint(0,2)] == bot_play[0]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[0]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úäüèª\n–ù–ò–ß–¨–Ø –ù–ê–•–û–ô!')
    elif bot_play[random.randint(0,2)] == bot_play[1]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[1]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úäüèª\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª –ë–ê–ó–ê–† –ñ–û–ö!')
    elif bot_play[random.randint(0,2)] == bot_play[2]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[2]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úäüèª\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –õ–û–®–û–ö )')
    
@dp.callback_query_handler(text="nojnicy")
async def nojnicy_fun(message: types.Message):

    await bot.delete_message(GROUP_ID, message.message.message_id)

    if bot_play[random.randint(0,2)] == bot_play[1]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[1]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úåüèª\n–ù–ò–ß–¨–Ø –ù–ê–•–û–ô!')
    elif bot_play[random.randint(0,2)] == bot_play[2]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[2]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úåüèª\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª –ë–ê–ó–ê–† –ñ–û–ö!')
    elif bot_play[random.randint(0,2)] == bot_play[0]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[0]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úåüèª\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –õ–û–®–û–ö )')

@dp.callback_query_handler(text="bumaga")
async def bumaga_fun(message: types.Message):

    await bot.delete_message(GROUP_ID, message.message.message_id)

    if bot_play[random.randint(0,2)] == bot_play[2]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[2]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úãüèª\n–ù–ò–ß–¨–Ø –ù–ê–•–û–ô!')
    elif bot_play[random.randint(0,2)] == bot_play[0]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[0]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úãüèª\n–¢—ã –≤—ã–∏–≥—Ä–∞–ª –ë–ê–ó–ê–† –ñ–û–ö!')
    elif bot_play[random.randint(0,2)] == bot_play[1]:
        await bot.send_message(GROUP_ID, f'–ë–æ—Ç –≤—ã–±—Ä–∞–ª {bot_play[1]}\n–¢—ã –≤—ã–±—Ä–∞–ª ‚úäüèª\n–¢—ã –ø—Ä–æ–∏–≥—Ä–∞–ª –õ–û–®–û–ö )')


# –§–∏–ª—å—Ç—Ä—ã –∏ —Ñ—É–Ω–∫—Ü–∏–∏ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —á–∞—Ç–æ–≤
@dp.message_handler()
async def loxi(message: types.Message):
    for i in list3:
        if i in message.text.lower():
            await message.reply("–ù–µ—Ç –æ–Ω –ª–æ—Ö!")
        else:
            pass
    for i in list2:
        if i in message.text.lower():
            await message.reply(f"–¢—ã –ø—Ä–∞–≤! {i}")
        else:
            pass
    for i in list1:
        if i in message.text.lower():
            await message.delete()
            await message.answer(f"{message.from_user.full_name} –ù–µ –º–∞—Ç–µ—Ä–∏—Å—å! –°–∞–º(a) —Ç—ã {i}")
        else:
            pass
    for i in hello:
        if i in message.text.lower():
            await message.reply('–ó–¥–æ—Ä–æ–≤–∞ –∑–∞–µ–±–∞–ª!')




if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    executor.start_polling(dp, skip_updates=True)
